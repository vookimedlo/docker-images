name: Reusable docker component images CI via buildah

on:
  workflow_call:
    inputs:
      container_file:
        description: 'The container file for creating the target docker image.'
        required: true
        type: string
      docker_image:
        description: 'The target docker image.'
        required: true
        type: string
      docker_tags:
        description: 'The target docker image tags (space separated).'
        required: true
        type: string
      docker_platforms:
        description: 'The target docker image platforms (comma separated).'
        required: true
        type: string
      docker_registry:
        description: 'The target docker image registry'
        required: true
        type: string
      registry_user:
        description: 'The target docker image registry user'
        required: true
        type: string
    secrets:
      registry_pass:
        required: true

jobs:
  build:
    name: ${{ inputs.docker_image }}:${{ inputs.docker_tags }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Regctl [v0.5.0, prebuilt]
        if: ${{ inputs.docker_registry != 'docker.io' }}
        uses: vookimedlo/setup-regctl@v1
        with:
          regctl-version: 'v0.5.0'
      - name: Install Regctl [v0.4.8, prebuilt]
        if: ${{ inputs.docker_registry == 'docker.io' }}
        uses: vookimedlo/setup-regctl@v1
        with:
          regctl-version: 'v0.4.8'
      - name: Install the qemu dependency
        run: |
          sudo apt-get update
          sudo apt upgrade -y
          sudo apt-get install -y qemu-user-static
      - name: Check container files out
        uses: actions/checkout@v4
      - name: Value evaluation
        id: value-eval
        run: |
          echo "GIT_COMMIT=$(git rev-parse -q --verify HEAD)" >> "$GITHUB_OUTPUT"
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"
      - name: Update container files
        run: |
          find ./gcc/   -name "Dockerfile" -print0 | xargs -L 1 -0 sed -i'.orig' 's/FROM /FROM docker.io\//'
          find ./clang/ -name "Dockerfile" -print0 | xargs -L 1 -0 sed -i'.orig' 's/FROM /FROM docker.io\//'
          find ./qt/    -name "Dockerfile" -print0 | xargs -L 1 -0 sed -i'.orig' 's/FROM ${{ inputs.registry_user }}/FROM ${{ inputs.docker_registry }}\/${{ inputs.registry_user }}/'
      - name: Log in to the container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ inputs.registry_user }}
          password: ${{ secrets.registry_pass }}
      - name: Log in via the Docker ecosystem
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ inputs.registry_user }}
          password: ${{ secrets.registry_pass }}
      - name: Build a docker image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ inputs.docker_image }}
          tags: ${{ inputs.docker_tags }}
          platforms: ${{ inputs.docker_platforms }}
          oci: true
          containerfiles: |
            ${{ inputs.container_file }}
          build-args: |
            BUILD_DATE=${{ steps.value-eval.outputs.BUILD_DATE }}
            GIT_COMMIT=${{ steps.value-eval.outputs.GIT_COMMIT }}
      - name: Push to the registry
        id: push-to-registry
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ inputs.docker_registry }}/${{ inputs.registry_user }}
          username: ${{ inputs.registry_user }}
          password: ${{ secrets.registry_pass }}
          extra-args: --format=oci
      - name: Print the image url
        run: echo "Image pushed to ${{ steps.push-to-registry.outputs.registry-paths }}"
      - name: Inspect manifest
        shell: bash
        run: |
          sleep 5

          readonly image="${{ inputs.docker_registry }}/${{ inputs.registry_user }}/${{ steps.build-image.outputs.image-with-tag }}"
          readonly isMultiArch=$(regctl manifest get $image --format '{{ .IsList }}')
  
          if [[ "$isMultiArch" == "true" ]]; then
            regctl image inspect $image --format '{{range $k, $v := .Config.Labels}}{{$k}} = {{$v}}{{println}}{{end}}' | \
              grep -E '(org.opencontainers.image.authors|org.opencontainers.image.description|org.opencontainers.image.revision|org.opencontainers.image.title|org.opencontainers.image.url|org.opencontainers.image.vendor)' > labels
          
            readonly annotateCommands=$(cat labels | while read line;   \
              do echo $line | sed "s/\(.*\) = \(.*\)$/--annotation \1='\2'/"; \
              done | tr '\n' ' ')
          
            if [[ ! -z "$annotateCommands" ]]; then
              echo "regctl image mod --replace $annotateCommands $image" >modif.sh
              chmod 755 modif.sh
              cat modif.sh
              sh -c ./modif.sh
            fi
          fi
